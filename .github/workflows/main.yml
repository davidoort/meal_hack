on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
name: Build and Test
jobs:
  build-and-test:
    name: Build, Lint and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - uses: subosito/flutter-action@v1
        with:
          channel: "dev"
      - uses: codecov/codecov-action@v1.0.2
        if: matrix.os == 'ubuntu-latest'
        with:
          token: ${{secrets.CODECOV_TOKEN}} #required
          file: ./coverage/lcov.info #optional
      - run: flutter pub get
        working-directory: ./meal_hack_flutter
      - run: flutter build aot
        working-directory: ./meal_hack_flutter
      # Analyze our Dart code
      - run: flutter analyze
        working-directory: ./meal_hack_flutter
      # Run our tests
      - run: flutter test --coverage
        working-directory: ./meal_hack_flutter

  drive:
    name: Run Test Drive on ${{ matrix.device }}
    runs-on: macos-latest
    # timeout-minutes: 10
    strategy:
      matrix:
        device:
          - "iPhone 8 (13.3)"
    steps:
      # A name for your step to display on GitHub.
      - name: "List all simulators"
        run: "xcrun instruments -s"
      - name: "Start Simulator"
        run: |
          UDID=$(
            xcrun instruments -s |
            awk \
              -F ' *[][]' \
              -v 'device=${{ matrix.device }}' \
              '$1 == device { print $2 }'
          )
          xcrun simctl boot "${UDID:?No Simulator with this name found}"
      # The branch or tag ref that triggered the workflow will be
      # checked out.
      # https://github.com/actions/checkout
      - uses: actions/checkout@v1
      # Sets up a flutter environment.
      # https://github.com/marketplace/actions/flutter-action
      - uses: subosito/flutter-action@v1
        with:
          channel: "dev" # or: 'dev' or 'beta'
      - name: "Run Flutter Driver tests"
        run: "flutter drive --target=test_driver/app.dart"
        working-directory: ./meal_hack_flutter
